(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{449:function(t,s,a){"use strict";a.r(s);var n=a(27),p=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"css3伪类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css3伪类"}},[t._v("#")]),t._v(" CSS3伪类")]),t._v(" "),a("br"),t._v(" "),a("blockquote",[a("p",[t._v("css3 中添加了很多了伪类选择器，这里要讲的主要是 "),a("code",[t._v(":nth-of-type()")]),t._v(" 和 "),a("code",[t._v(":nth-child()")]),t._v(" 。因为经常会出现两个选择器的功能不清楚，或者设置样式无效的问题。")])]),t._v(" "),a("h3",{attrs:{id:"nth-child"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nth-child"}},[t._v("#")]),t._v(" :nth-child()")]),t._v(" "),a("blockquote",[a("p",[t._v("MDN: :nth-child(an+b) 这个 CSS 伪类首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从1开始排序，选择的结果为 CSS 伪类 "),a("code",[t._v(":nth-child")]),t._v(" 括号中表达式（an+b）匹配到的元素集合（n=0，1，2，3...）。")])]),t._v(" "),a("p",[t._v("先来一个直接的栗子：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("3"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("4"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("5"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 匹配 p 元素的所有兄弟元素，从第二个元素开始（包含第二个）后面的所有 p 元素 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 效果：2，3，5 高亮 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("p:nth-child(n + 2)")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"nth-of-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nth-of-type"}},[t._v("#")]),t._v(" :nth-of-type()")]),t._v(" "),a("p",[t._v("借用上面的 DOM 在来看看 :nth-of-type() 的效果。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 匹配 p 元素所有的兄弟 p 元素，从第二个 p 元素开始（包含第二个）后面所有的 p 元素 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 效果：3，5 高亮 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("p:nth-of-type(n + 2)")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("从这个例子可以看出："),a("strong",[t._v("虽然它们渲染的都是 p 元素的样式")]),t._v("。但两个选择器还是有区别的：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(":nth-child()")]),t._v(" 匹配的是所有当前元素的兄弟元素，然后按照位置先后顺序从 1 开始排序；")]),t._v(" "),a("li",[a("code",[t._v(":nth-of-type()")]),t._v(" 匹配的是所有当前元素"),a("strong",[t._v("同类型的兄弟元素")]),t._v("，然后排序。")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("需要注意的是，DOM 节点是从1开始排序的，而 n 是从0开始赋值的。也就是说，假若像上面代码这样的需求：需要设置后几位 DOM 的样式，n + 1 是等效于 n 的，因为没有第零号元素。")])]),t._v(" "),a("Vssue",{attrs:{title:t.$title}})],1)}),[],!1,null,null,null);s.default=p.exports}}]);