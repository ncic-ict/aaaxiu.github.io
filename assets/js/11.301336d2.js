(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{406:function(t,a,s){t.exports=s.p+"assets/img/5.aefbf0ba.png"},452:function(t,a,s){"use strict";s.r(a);var n=s(27),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"git常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" Git常用命令")]),t._v(" "),n("br"),t._v(" "),n("p",[n("img",{attrs:{src:s(406),alt:""}})]),t._v(" "),n("p",[t._v("名词解释: "),n("strong",[t._v("Workspace(工作区)")]),t._v(", "),n("strong",[t._v("Index/Stage(暂存区)")]),t._v(", "),n("strong",[t._v("Repository(仓库区)")]),t._v(", "),n("strong",[t._v("Remote(远程仓库)")])]),t._v(" "),n("ul",[n("li",[t._v("HEAD 表示当前活跃分支的游标。你当前在哪儿，HEAD就指向哪儿。")])]),t._v(" "),n("ol",[n("li",[t._v("增加/删除文件")])]),t._v(" "),n("div",{staticClass:"language-git extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-git"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加指定文件到暂存区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git add [file1] [file2] ...")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加指定目录到暂存区，包括子目录")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git add [dir]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加当前目录的所有文件到暂存区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git add .")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除工作区文件，并且将这次删除放入暂存区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git rm [file1] [file2] ...")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止追踪指定文件，但该文件会保留在工作区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git rm"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --cached")]),t._v(" [file]")]),t._v("\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("代码提交")])]),t._v(" "),n("div",{staticClass:"language-git extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-git"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交暂存区到仓库区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" [message]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交暂存区的指定文件到仓库区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit [file1] [file2] ..."),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" [message]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交工作区自上次commit之后的变化，直接到仓库区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -a")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交时显示所有diff信息")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -v")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用一次新的commit，替代上一次提交")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果代码没有任何新变化，则用来改写上一次commit的提交信息")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --amend")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" [message]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重做上一次commit，并包括指定文件的新变化")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --amend")]),t._v(" [file1] [file2] ...")]),t._v("\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("分支")])]),t._v(" "),n("div",{staticClass:"language-git extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br")]),n("pre",{pre:!0,attrs:{class:"language-git"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有本地分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有远程分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -r")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有本地分支和远程分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -a")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，但依然停留在当前分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch [branch-name]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，并切换到该分支，git2.23以后也可以使用`git switch -c [branch]`")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -b")]),t._v(" [branch] [origin/branch]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，与指定的远程分支建立追踪关系")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --track")]),t._v(" [branch] [remote-branch]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到指定分支，并更新工作区，git2.23以后也可以使用`git switch [branch-name]`")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout [branch-name]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 建立追踪关系，在现有分支与指定的远程分支之间")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --set")]),t._v("-upstream [branch] [remote-branch]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并指定分支到当前分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git merge [branch]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -d")]),t._v(" [branch-name]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除远程分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git push origin"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --delete")]),t._v(" [branch-name]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改本地分支名称")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" [old-branch-name] [new-branch-name]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前分支的合并情况")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --graph")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --pretty")]),t._v("=oneline"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --abbrev")]),t._v("-commit")]),t._v("\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("标签")])]),t._v(" "),n("div",{staticClass:"language-git extra-class"},[n("pre",{pre:!0,attrs:{class:"language-git"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有tag")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git tag")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个tag在当前commit")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git tag [tag]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个tag在指定commit")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git tag [tag] [commit]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除本地tag")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git tag"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -d")]),t._v(" [tag]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除远程tag")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git push origin :refs/tags/[tagName]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看tag信息")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git show [tag]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交指定tag")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git push [remote] [tag]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交所有tag")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git push [remote]"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --tags")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，指向某个tag")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -b")]),t._v(" [branch] [tag]")]),t._v("\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("查看信息")])]),t._v(" "),n("div",{staticClass:"language-git extra-class"},[n("pre",{pre:!0,attrs:{class:"language-git"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示有变更的文件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git status")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示当前分支的版本历史")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示commit历史，以及每次commit发生变更的文件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --stat")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某个文件的版本历史，包括文件改名")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --follow")]),t._v(" [file]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git whatchanged [file]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示指定文件相关的每一次diff")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -p")]),t._v(" [file]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示过去5次提交")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -5")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --pretty")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --oneline")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有提交过的用户，按提交次数排序")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git shortlog"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -sn")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示指定文件是什么人在什么时间修改过")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git blame [file]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示暂存区和工作区的差异")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git diff")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示暂存区和上一个commit的差异")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git diff"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --cached")]),t._v(" [file]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示工作区与当前分支最新commit之间的差异")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git diff HEAD")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示两次提交之间的差异")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git diff [first-branch]...[second-branch]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某次提交的元数据和内容变化")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git show [commit]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示当前分支的最近几次提交")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reflog")]),t._v("\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[t._v("远程同步")])]),t._v(" "),n("div",{staticClass:"language-git extra-class"},[n("pre",{pre:!0,attrs:{class:"language-git"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载远程仓库的所有变动")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git fetch [remote]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有远程仓库")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -v")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某个远程仓库的信息")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote show [remote]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 增加一个新的远程仓库，并命名")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote add [shortname] [url]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取回远程仓库的变化，并与本地分支合并")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git pull [remote] [branch]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上传本地指定分支到远程仓库")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git push [remote] [branch]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推送所有分支到远程仓库")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git push [remote]"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --all")])]),t._v("\n")])])]),n("ol",{attrs:{start:"7"}},[n("li",[t._v("撤销")])]),t._v(" "),n("div",{staticClass:"language-git extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-git"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复暂存区的指定文件到工作区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout [file]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复某个commit的指定文件到暂存区和工作区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout [commit] [file]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复暂存区的所有文件到工作区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout .")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset [file]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重置暂存区与工作区，与上一次commit保持一致")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --hard")]),t._v(" [commitID]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看执行过得命令（可查看撤销的commitId）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reflog")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset [commit]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --hard")]),t._v(" [commit]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重置当前HEAD为指定commit，但保持暂存区和工作区不变")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset"),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --keep")]),t._v(" [commit]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个commit，用来撤销指定commit")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 后者的所有变化都将被前者抵消，并且应用到当前分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git revert [commit]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂时将未提交的变化移除，稍后再移入")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git stash")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git stash pop")]),t._v("\n")])])]),n("Vssue",{attrs:{title:t.$title}})],1)}),[],!1,null,null,null);a.default=e.exports}}]);